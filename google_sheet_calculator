function doGet(e) {
    // Получаем параметры из запроса
    const category = e.parameter.category;
    const weight = parseFloat(e.parameter.weight);
    const length = parseFloat(e.parameter.length);
    const width = parseFloat(e.parameter.width);
    const height = parseFloat(e.parameter.height);
    const packagingType = e.parameter.packagingType; // Мешок, Углы или Каркас

    if (!category || isNaN(weight) || isNaN(length) || isNaN(width) || isNaN(height) || !packagingType) {
        return ContentService.createTextOutput("Не все параметры указаны").setMimeType(ContentService.MimeType.TEXT);
    }

    // Получаем данные из таблицы
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const weightSheet = ss.getSheetByName("Weight");
    const densitySheet = ss.getSheetByName("density");
    const currencySheet = ss.getSheetByName("курс");

    // Расчет веса с упаковкой
    const result = calculateWeightAndCost(weightSheet, weight, packagingType);
    if (!result) {
        return ContentService.createTextOutput("Вес не попадает в диапазон").setMimeType(ContentService.MimeType.TEXT);
    }

    const packedWeight = result.packedWeight;
    const packagingCost = result.packagingCost;
    const unloadCost = result.unloadCost;

    // Расчет плотности
    const volume = (length / 100) * (width / 100) * (height / 100); // Объем в м³
    const density = packedWeight / volume;

    // Получаем стоимость доставки на основе категории и плотности
    const deliveryCosts = calculateDeliveryCost(densitySheet, category, density);

    if (!deliveryCosts) {
        return ContentService.createTextOutput("Категория или плотность не найдена").setMimeType(ContentService.MimeType.TEXT);
    }

    // Получаем курс валют
    const currencyData = getCurrency(currencySheet);

    // Формируем результат
    const response = {
        packedWeight: packedWeight.toFixed(2),
        packagingCost: packagingCost.toFixed(2),
        unloadCost: unloadCost.toFixed(2),
        density: density.toFixed(2),
        fastAutoCost: deliveryCosts.fastAutoCost.toFixed(2),
        regularAutoCost: deliveryCosts.regularAutoCost.toFixed(2),
        usdToRUB: currencyData.usdToRUB.toFixed(2),
        yuanToRUB: currencyData.yuanToRUB.toFixed(2)
    };

    return ContentService.createTextOutput(JSON.stringify(response)).setMimeType(ContentService.MimeType.JSON);
}

// Функция для расчета веса с упаковкой
function calculateWeightAndCost(sheet, weight, packagingType) {
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const minWeight = parseFloat(row[0]);
        const maxWeight = parseFloat(row[1]);

        if (weight >= minWeight && weight <= maxWeight) {
            let packedWeight, packagingCost, unloadCost;

            switch (packagingType.toLowerCase()) {
                case "мешок":
                    packedWeight = parseFloat(row[3]);
                    packagingCost = parseFloat(row[4]);
                    unloadCost = parseFloat(row[5]);
                    break;
                case "углы":
                    packedWeight = parseFloat(row[7]);
                    packagingCost = parseFloat(row[8]);
                    unloadCost = parseFloat(row[9]);
                    break;
                case "каркас":
                    packedWeight = parseFloat(row[11]);
                    packagingCost = parseFloat(row[12]);
                    unloadCost = parseFloat(row[13]);
                    break;
                default:
                    return null;
            }

            return { packedWeight, packagingCost, unloadCost };
        }
    }
    return null;
}

// Функция для расчета стоимости доставки
function calculateDeliveryCost(sheet, category, density) {
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const itemCategory = row[0];
        const minDensity = parseFloat(row[1]);
        const maxDensity = parseFloat(row[2]);

        if (itemCategory === category && density >= minDensity && density <= maxDensity) {
            const fastAutoCost = parseFloat(row[4]);
            const regularAutoCost = parseFloat(row[5]);
            return { fastAutoCost, regularAutoCost };
        }
    }
    return null;
}

// Функция для получения курса валют
function getCurrency(sheet) {
    const data = sheet.getDataRange().getValues();
    const usdToRUB = parseFloat(data[0][0]);
    const yuanToRUB = parseFloat(data[1][0]);
    return { usdToRUB, yuanToRUB };
}
